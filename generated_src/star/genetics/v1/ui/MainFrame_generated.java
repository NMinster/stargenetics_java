/* Generated by star.annotations.GeneratedClass, all changes will be lost */

package star.genetics.v1.ui;

abstract class MainFrame_generated extends javax.swing.JFrame implements star.event.EventController, star.event.Listener, star.genetics.events.ErrorDialogRaiser
{
	private star.event.Adapter adapter;
	private java.lang.Exception errorMessage;
	private java.util.prefs.Preferences preferences = loadPreferences();
	private static final long serialVersionUID = 1L;

	public MainFrame_generated() throws java.awt.HeadlessException
	{
		super();
	}

	public MainFrame_generated(java.awt.GraphicsConfiguration graphicsConfiguration)
	{
		super(graphicsConfiguration);
	}

	public MainFrame_generated(java.lang.String string, java.awt.GraphicsConfiguration graphicsConfiguration)
	{
		super(string, graphicsConfiguration);
	}

	public MainFrame_generated(java.lang.String string) throws java.awt.HeadlessException
	{
		super(string);
	}

	public void addNotify()
	{
		super.addNotify();
		getAdapter().addHandled(star.genetics.events.LoadModelEvent.class);
	}

	public void eventRaised(final star.event.Event event)
	{
		eventRaisedHandles(event);
	}

	private void eventRaisedHandles(final star.event.Event event)
	{
		if (event.getClass().getName().equals("star.genetics.events.LoadModelEvent") && event.isValid())
		{
			long start = System.nanoTime();

			loadModel((star.genetics.events.LoadModelRaiser) event.getSource());
			long end = System.nanoTime();
			if (end - start > 500000000)
			{
				System.out.println(this.getClass().getName() + ".loadModel " + (end - start) / 1000000);
			}
		}
	}

	public star.event.Adapter getAdapter()
	{
		if (adapter == null)
		{
			adapter = new star.event.Adapter(this);
		}
		return adapter;
	}

	public java.lang.Exception getErrorMessage()
	{
		return this.errorMessage;
	}

	java.util.prefs.Preferences getPreferences(java.lang.String name)
	{
		try
		{
			plugin.preferences.Preferences pref = (plugin.preferences.Preferences) plugin.Loader.getDefaultLoader().getPlugin(plugin.preferences.Preferences.class.getName(), plugin.preferences.PreferencesImplementation.class.getName());
			this.preferences = pref.getPreferences(name);
		}
		catch (plugin.PluginException ex)
		{
			ex.printStackTrace();
		}
		if (preferences == null)
		{
			return java.util.prefs.Preferences.userRoot().node(name);
		}
		return preferences;
	}

	java.util.prefs.Preferences getPreferences()
	{
		if (preferences == null)
		{
			try
			{
				plugin.preferences.Preferences pref = (plugin.preferences.Preferences) plugin.Loader.getDefaultLoader().getPlugin(plugin.preferences.Preferences.class.getName(), plugin.preferences.PreferencesImplementation.class.getName());
				this.preferences = pref.getPreferences("star.genetics.v1.ui.MainFrame");
			}
			catch (plugin.PluginException ex)
			{
				ex.printStackTrace();
			}
		}
		if (preferences == null)
		{
			return java.util.prefs.Preferences.userRoot().node("star.genetics.v1.ui.MainFrame");
		}
		return preferences;
	}

	abstract void loadModel(star.genetics.events.LoadModelRaiser LoadModelRaiser);

	java.util.prefs.Preferences loadPreferences()
	{
		try
		{
			plugin.preferences.Preferences pref = (plugin.preferences.Preferences) plugin.Loader.getDefaultLoader().getPlugin(plugin.preferences.Preferences.class.getName(), plugin.preferences.PreferencesImplementation.class.getName());
			java.util.Properties prop = new java.util.Properties();
			prop.load(this.getClass().getClassLoader().getResourceAsStream("resources/default.properties"));
			pref.setApplication("StarGenetics", prop);
		}
		catch (Throwable ex)
		{
			ex.printStackTrace();
		}
		return getPreferences();
	}

	public void raise_ErrorDialogEvent()
	{
		(new star.genetics.events.ErrorDialogEvent(this)).raise();
	}

	public void removeNotify()
	{
		super.removeNotify();
		getAdapter().removeHandled(star.genetics.events.LoadModelEvent.class);
	}

	protected void setErrorMessage(java.lang.Exception errorMessage)
	{
		this.errorMessage = errorMessage;
	}

}