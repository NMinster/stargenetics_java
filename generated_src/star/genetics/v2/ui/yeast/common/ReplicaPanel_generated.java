/* Generated by star.annotations.GeneratedClass, all changes will be lost */

package star.genetics.v2.ui.yeast.common;

abstract class ReplicaPanel_generated extends javax.swing.JPanel implements star.event.EventController, star.event.Listener, star.genetics.v2.yeast.events.StorableExperimentRaiser
{
	private star.event.Adapter adapter;
	private star.genetics.v1.ui.model.CrateModel model;
	private static final long serialVersionUID = 1L;

	public  ReplicaPanel_generated()
	{
		super();
	}
	 
	public  ReplicaPanel_generated(boolean boolean0)
	{
		super(boolean0);
	}
	 
	public  ReplicaPanel_generated(java.awt.LayoutManager layoutManager, boolean boolean0)
	{
		super(layoutManager,boolean0);
	}
	 
	public  ReplicaPanel_generated(java.awt.LayoutManager layoutManager)
	{
		super(layoutManager);
	}
	 
	public void addNotify()
	{
		super.addNotify();
		getAdapter().addHandled( star.genetics.v2.yeast.events.CreaturePropertiesChangedEvent.class );
		getAdapter().addHandled( star.genetics.v1.ui.events.OrganismSetAsParentEvent.class );
		getAdapter().addHandled( star.genetics.v2.yeast.events.ReplicationExperimentAddAllEvent.class );
	}
	 
	public void eventRaised(final star.event.Event event)
	{
		eventRaisedHandles(event);
	}
	 
	private void eventRaisedHandles(final star.event.Event event)
	{
		if( event.getClass().getName().equals( "star.genetics.v2.yeast.events.CreaturePropertiesChangedEvent" ) && event.isValid() ) 
		{
			 long start = System.nanoTime();
			
			handle( (star.genetics.v2.yeast.events.CreaturePropertiesChangedRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handle "  + ( end-start )/1000000 ); } 
		}
		if( event.getClass().getName().equals( "star.genetics.v1.ui.events.OrganismSetAsParentEvent" ) && event.isValid() ) 
		{
			 long start = System.nanoTime();
			
			handle( (star.genetics.v1.ui.events.OrganismSetAsParentRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handle "  + ( end-start )/1000000 ); } 
		}
		if( event.getClass().getName().equals( "star.genetics.v2.yeast.events.ReplicationExperimentAddAllEvent" ) && event.isValid() ) 
		{
			 long start = System.nanoTime();
			
			handle( (star.genetics.v2.yeast.events.ReplicationExperimentAddAllRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handle "  + ( end-start )/1000000 ); } 
		}
	}
	 
	public star.event.Adapter getAdapter()
	{
		if( adapter == null )
		{
			adapter = new star.event.Adapter(this);
		}
		return adapter;
	}
	 
	protected star.genetics.v1.ui.model.CrateModel getModel()
	{
		return this.model ;
	}
	 
	abstract void handle(star.genetics.v1.ui.events.OrganismSetAsParentRaiser OrganismSetAsParentRaiser);
	 
	abstract void handle(star.genetics.v2.yeast.events.CreaturePropertiesChangedRaiser CreaturePropertiesChangedRaiser);
	 
	abstract void handle(star.genetics.v2.yeast.events.ReplicationExperimentAddAllRaiser ReplicationExperimentAddAllRaiser);
	 
	public void raise_StorableExperimentEvent()
	{
		(new star.genetics.v2.yeast.events.StorableExperimentEvent(this)).raise();
	}
	 
	public void removeNotify()
	{
		super.removeNotify();
		getAdapter().removeHandled( star.genetics.v2.yeast.events.CreaturePropertiesChangedEvent.class );
		getAdapter().removeHandled( star.genetics.v1.ui.events.OrganismSetAsParentEvent.class );
		getAdapter().removeHandled( star.genetics.v2.yeast.events.ReplicationExperimentAddAllEvent.class );
	}
	 
	protected void setModel(star.genetics.v1.ui.model.CrateModel model)
	{
		this.model = model ;
	}
	 
	abstract void showCreatureIsAlreadyInTheList();
	 
	void showCreatureIsAlreadyInTheList_SwingUtilitiesInvokeLater()
	{
		javax.swing.SwingUtilities.invokeLater(new java.lang.Runnable()
			{
			public void run() {
				showCreatureIsAlreadyInTheList();
			}
		});
	}
	 
	abstract void updateView();
	 
	void updateView_SwingUtilitiesInvokeLater()
	{
		javax.swing.SwingUtilities.invokeLater(new java.lang.Runnable()
			{
			public void run() {
				updateView();
			}
		});
	}
	 
}